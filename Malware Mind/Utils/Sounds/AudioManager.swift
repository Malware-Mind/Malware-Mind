//
//  Sounds.swift
//  Malware Mind
//
//  Created by Alley Pereira on 15/03/21.
//

import SpriteKit
import AVFoundation

enum AudioConfig: String {

    case isSoundtrackMuted
    case isSoundEffectMuted

}

enum SoundName: String {

    static let soundExtension = "mp3"

    case background = "Background"

}

class AudioManager {

    var audioPlayer: AVAudioPlayer?

    var isSoundtrackMuted: Bool
    var isSoundEffectMuted: Bool

    init() {

        isSoundtrackMuted = UserDefaults.standard.bool(forKey: AudioConfig.isSoundtrackMuted.rawValue)
        isSoundEffectMuted = UserDefaults.standard.bool(forKey: AudioConfig.isSoundEffectMuted.rawValue)
    }

    func getSKAudioNode(_ name: SoundName) -> SKAudioNode? {

        if !isSoundEffectMuted {

            let audioNode = SKAudioNode(fileNamed: name.rawValue)

            return audioNode

        }

        return nil

    }

    func stopSKAudioNode(_ audioNode: SKAudioNode?) -> Bool {

        if !isSoundEffectMuted {

            audioNode?.run(SKAction.stop())

            return true

        }

        return false

    }

    func playSKAudioNode(_ name: SoundName) -> SKAction? {

        if !isSoundEffectMuted {

            SKAction.playSoundFileNamed(name.rawValue, waitForCompletion: false)

        }

        return nil

    }

    func stopSound() -> Bool {

        guard let audioPlayer = audioPlayer else { return false }

        audioPlayer.stop()

        return true

    }

    func playSound(named: SoundName, numberOfLoop: Int = 0, volume: Float = 1.0) {

        if isSoundEffectMuted == false {

            if let url: URL = Bundle.main.url(forResource: named.rawValue, withExtension: SoundName.soundExtension) {

                do {

                    audioPlayer = try AVAudioPlayer(contentsOf: url, fileTypeHint: nil)

                    audioPlayer?.numberOfLoops = numberOfLoop

                    audioPlayer?.volume = volume

                    audioPlayer?.play()

                } catch { }

            }

        }

    }

}
