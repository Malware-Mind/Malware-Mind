//
//  GameScene.swift
//  Malware Mind
//
//  Created by Alley Pereira on 15/03/21.
//

import Foundation
import SpriteKit
import GameplayKit

//swiftlint:disable identifier_name
enum Movements: String {
    case up = "upNode"
    case down = "downNode"
    case left = "leftNode"
    case right = "rightNode"
    case none
}

class GameScene: SKScene {

    // MARK: - Camera and SKScene related properties
    lazy var sceneCamera: SKCameraNode = {
        let camera = SKCameraNode()
        camera.setScale(2)
        return camera
    }()

    // MARK: - Entities and Level
    var level = Level()
    let cellWidth: Int = 40

    let antivirus = Antivirus()
    let background = Background()
    let wormEntity: WormEntity = WormEntity()

    lazy var collectEntity: CollectathonsEntity = {
        let collect = CollectathonsEntity()
        collect.gridPosition = level.collectablePositions[0].gridPosition
        return collect
    }()

    lazy var virusEntity: VirusEntity = {
        let virus = VirusEntity()
        virus.addComponent(VirusControlComponent(game: self, enemy: virus, startingPosition: level.enemyStartPositions[0]))
        return virus
    }()

    //SpriteNodes
    private var wormSpriteNode: SKSpriteNode {
        wormEntity.component(ofType: AnimatedSpriteComponent.self)!.spriteNode
    }
    private var collectathonSpriteNode: SKSpriteNode {
        collectEntity.component(ofType: AnimatedSpriteComponent.self)!.spriteNode
    }

    //Agents
    let wormAgent: GKAgent2D = GKAgent2D()
    let collectathonAgent: GKAgent2D = GKAgent2D()

    private var wormAgentShape: SKShapeNode!
    private var collectathonAgentShape: SKShapeNode!

    // MARK: - Control Components
    var controlComponent: PlayerControlComponent? {
        antivirus.component(ofType: PlayerControlComponent.self)
    }

    // MARK: - SKScene Life-Cycle
    private var prevUpdateTime: TimeInterval = 0.0

    override func didMove(to view: SKView) {
        super.didMove(to: view)

        self.backgroundColor = .white

        self.setupNodesPosition()

        //Setup Agents
        setupCollectathonAgent()
        setupWormAgent()

        physicsWorld.contactDelegate = self
    }

    override func update(_ currentTime: TimeInterval) {
        super.update(currentTime)

        //Track remaining time delta since last update.
        if self.prevUpdateTime == 0 {
            self.prevUpdateTime = currentTime
        }

        let delta = currentTime - self.prevUpdateTime
        self.prevUpdateTime = currentTime

        //Update components with the new time delta.
        self.virusEntity.update(deltaTime: delta)
        self.wormEntity.update(deltaTime: delta)

        //Update agents
        self.wormAgent.update(deltaTime: delta)
    }

    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {

        guard let touch = touches.first else { return }
        let location = touch.location(in: self)
        let tappedNodes = nodes(at: location)

        for node in tappedNodes {
            switch node.name {
            case Movements.up.rawValue:
                controlComponent?.handle(direction: .up)
            case Movements.down.rawValue:
                controlComponent?.handle(direction: .down)
            case Movements.left.rawValue:
                controlComponent?.handle(direction: .left)
            case Movements.right.rawValue:
                controlComponent?.handle(direction: .right)
            case "attackNode":
                print("attacking you")
                controlComponent?.attack()
            case "wall":
                print("hitting the wall")
            default:
                print("none")
            }
        }
    }

    // MARK: - Adding Nodes to Scene
    func setupNodesPosition() {

        //Background
        guard let backgroundNode = background.tileMap else { return }

        backgroundNode.position = CGPoint(x: self.frame.midX, y: self.frame.midY+30)
        self.addChild(backgroundNode)

        //Antivirus
        guard let antivirusSpriteNode = antivirus.component(ofType: AnimatedSpriteComponent.self)?.spriteNode else { return }

        antivirusSpriteNode.size = CGSize(width: 45, height: 60)
        antivirusSpriteNode.name = "antivirus"
        antivirusSpriteNode.physicsBody = SKPhysicsBody(
            rectangleOf:
                CGSize(
                    width: antivirusSpriteNode.size.width,
                    height: antivirusSpriteNode.size.height
                )
        )
        antivirusSpriteNode.physicsBody?.isDynamic = false
        antivirusSpriteNode.physicsBody?.usesPreciseCollisionDetection = true
        antivirusSpriteNode.physicsBody!.contactTestBitMask = antivirusSpriteNode.physicsBody!.collisionBitMask

        antivirusSpriteNode.position = CGPoint(x: backgroundNode.frame.midX, y: backgroundNode.frame.midY-20)

        self.addChild(antivirusSpriteNode)

        //HUD
        addDpadButtonNode()
        addAttackButtonNode()
        addWallNodes()

        // MARK: - Show Virus, Worm, Collectathon in Scene
        setupNodeWorm(initialPosition: CGPoint(x: self.frame.midX-100, y: self.frame.midY-50))
        setupNodeCollectathon()
        setupNodeVirus()
    }

     func setupNodeCollectathon() {
        collectathonSpriteNode.position = CGPoint(x: self.frame.midX, y: self.frame.midY + 80)
        collectathonSpriteNode.setScale(0.25)
        self.addChild(collectathonSpriteNode)
    }

    func setupNodeVirus() {
        guard let virusSpriteComponent = virusEntity.component(ofType: AnimatedSpriteComponent.self)?.spriteNode else { return }

        virusSpriteComponent.position = CGPoint(x: self.frame.midX, y: self.frame.midY + 235)
        virusSpriteComponent.setScale(0.25)
        self.addChild(virusSpriteComponent)
    }

    func setupNodeWorm(initialPosition: CGPoint) {
        guard let antivirusSpriteNode = antivirus.component(ofType: AnimatedSpriteComponent.self)?.spriteNode else { return }

        wormSpriteNode.size = CGSize(width: 55, height: 25)
        wormSpriteNode.physicsBody?.isDynamic = true
        wormSpriteNode.physicsBody?.usesPreciseCollisionDetection = true

        // falta configurar colisao com antivirus
        wormSpriteNode.physicsBody?.contactTestBitMask = antivirusSpriteNode.physicsBody!.collisionBitMask

        wormSpriteNode.position = initialPosition
        wormSpriteNode.zPosition = 10

        self.addChild(wormSpriteNode)
    }

    // MARK: - Setup Agents and Goals
    func setupCollectathonAgent() {
        let radius = (collectathonSpriteNode.frame.height/2)

        collectathonAgent.radius = Float(radius)
        collectathonAgent.position = vector_float2(x: Float(collectathonSpriteNode.position.x), y: Float(collectathonSpriteNode.position.y))
        collectathonAgent.delegate = self

        // A circle to represent the agent's radius in the agent simulation.
        /*
        let collectathonAgentShape = SKShapeNode(circleOfRadius: radius)
        collectathonAgentShape.lineWidth = 2.5
        collectathonAgentShape.fillColor = UIColor.blue.withAlphaComponent(0.5)
        collectathonAgentShape.position = CGPoint(x: CGFloat(collectathonAgent.position.x), y: CGFloat(collectathonAgent.position.y))
        addChild(collectathonAgentShape)
         */
    }

    func setupWormAgent() {
        let radius = wormSpriteNode.texture!.size().height/2

        wormAgent.radius = Float(radius)
        wormAgent.position = vector_float2(x: Float(wormSpriteNode.position.x), y: Float(wormSpriteNode.position.y))
        wormAgent.delegate = self
        wormAgent.maxSpeed = 100
        wormAgent.maxAcceleration = 50

        //Goals
        let seekGoal = GKGoal(toSeekAgent: collectathonAgent)

        let behavior = GKBehavior(goal: seekGoal, weight: 100)
        wormAgent.behavior = behavior

        // A circle to represent the agent's radius in the agent simulation.
        /*
        wormAgentShape = SKShapeNode(circleOfRadius: radius)
        wormAgentShape.position = CGPoint(x: CGFloat(wormAgent.position.x), y: CGFloat(wormAgent.position.y))
        wormAgentShape.lineWidth = 2.5
        wormAgentShape.fillColor = UIColor.red.withAlphaComponent(0.5)
        addChild(wormAgentShape)
         */
    }

    // MARK: - HUD
    private func addDpadButtonNode() {

        guard let backgroundNode = background.tileMap else { return }

        let dPadButton = SKSpriteNode(imageNamed: "dpadButton")
        dPadButton.size = CGSize(width: 107, height: 103)
        dPadButton.position = CGPoint(x: backgroundNode.frame.minX+20, y: backgroundNode.frame.minY-80)
        addChild(dPadButton)

        let upNode = SKSpriteNode(imageNamed: "upButton")
        upNode.size = CGSize(width: 14, height: 12)
        upNode.position = CGPoint(x: dPadButton.frame.midX, y: dPadButton.frame.midY+40)
        upNode.name = "upNode"
        addChild(upNode)

        let downNode = SKSpriteNode(imageNamed: "upButton")
        downNode.size = CGSize(width: 14, height: 12)
        downNode.position = CGPoint(x: dPadButton.frame.midX, y: dPadButton.frame.midY-40)
        downNode.name = "downNode"
        addChild(downNode)

        let leftNode = SKSpriteNode(imageNamed: "upButton")
        leftNode.size = CGSize(width: 14, height: 12)
        leftNode.position = CGPoint(x: dPadButton.frame.midX-40, y: dPadButton.frame.midY)
        leftNode.name = "leftNode"
        addChild(leftNode)

        let rightNode = SKSpriteNode(imageNamed: "upButton")
        rightNode.size = CGSize(width: 14, height: 12)
        rightNode.position = CGPoint(x: dPadButton.frame.midX+40, y: dPadButton.frame.midY)
        rightNode.name = "rightNode"
        addChild(rightNode)
    }

    private func addAttackButtonNode() {

        guard let backgroundNode = background.tileMap else { return }

        let attackButton = SKSpriteNode(imageNamed: "attackButton")
        attackButton.size = CGSize(width: 80, height: 80)
        attackButton.position = CGPoint(x: backgroundNode.frame.maxX-20, y: backgroundNode.frame.minY-80)
        attackButton.name = "attackNode"
        addChild(attackButton)

    }

    private func addWallNodes() {

        guard let backgroundNode = background.tileMap else { return }

        let topWallNode = SKSpriteNode(imageNamed: "topWall")
        topWallNode.size = CGSize(width: 352, height: 50)
        topWallNode.position = CGPoint(x: backgroundNode.frame.midX+2, y: backgroundNode.frame.maxY+12)
        topWallNode.name = "topWall"

        topWallNode.physicsBody = SKPhysicsBody(rectangleOf: CGSize(width: topWallNode.size.width, height: topWallNode.size.height))
        topWallNode.physicsBody?.isDynamic = false
        topWallNode.physicsBody?.usesPreciseCollisionDetection = true
        topWallNode.physicsBody!.contactTestBitMask = topWallNode.physicsBody!.collisionBitMask

        addChild(topWallNode)
    }

    // MARK: - Level Configuration
    func point(forGridPosition position: SIMD2<Int32>) -> CGPoint {
        return CGPoint(
            x: Int(position.x) * cellWidth + cellWidth / 2,
            y: Int(position.y) * cellWidth + cellWidth / 2
        )
    }

    // Geracao de obstaculos para debug dos agents and goals
    func generateObstacles() -> [GKObstacle] {
        let obstacleColor: UIColor = .systemGray

        let obstacle1 = SKSpriteNode(color: obstacleColor, size: CGSize(width: 200, height: 200))
        obstacle1.position = CGPoint(x: -700, y: -800)
        obstacle1.makePhysicsBody(bitMask: 1, collision: 3, dynamic: false)
        self.addChild(obstacle1)

        let obstacle2 = SKSpriteNode(color: obstacleColor, size: CGSize(width: 200, height: 200))
        obstacle2.position = CGPoint(x: -700, y: 0)
        obstacle2.makePhysicsBody(bitMask: 1, collision: 3, dynamic: false)
        self.addChild(obstacle2)

        let obstacle3 = SKSpriteNode(color: obstacleColor, size: CGSize(width: 200, height: 200))
        obstacle3.position = CGPoint(x: 0, y: 600)
        obstacle3.makePhysicsBody(bitMask: 1, collision: 3, dynamic: false)
        self.addChild(obstacle3)

        let obstacle4 = SKSpriteNode(color: obstacleColor, size: CGSize(width: 200, height: 200))
        obstacle4.position = CGPoint(x: 700, y: -200)
        obstacle4.makePhysicsBody(bitMask: 1, collision: 3, dynamic: false)
        self.addChild(obstacle4)

        let obstacle5 = SKSpriteNode(color: obstacleColor, size: CGSize(width: 200, height: 200))
        obstacle5.position = CGPoint(x: 200, y: -800)
        obstacle5.makePhysicsBody(bitMask: 1, collision: 3, dynamic: false)
        self.addChild(obstacle5)

        let obstacles: [SKSpriteNode] = [obstacle1, obstacle2, obstacle3, obstacle4, obstacle5]

        return obstacles.map {
            let radius = ($0.frame.width/2)+200

            // A circle to represent the agent's radius in the agent simulation.
            /*
            let circleShape = SKShapeNode(circleOfRadius: radius)
            circleShape.lineWidth = 2.5
            circleShape.fillColor = UIColor.white.withAlphaComponent(0.5)
            circleShape.position = $0.position
            addChild(circleShape)
            */

            let gkObstacle = GKCircleObstacle(radius: Float(radius))
            gkObstacle.position = vector_float2(x: Float($0.position.x), y: Float($0.position.y))
            return gkObstacle
        }
    }

}

extension GameScene: GKAgentDelegate {

    func agentWillUpdate(_ agent: GKAgent) {
        guard let agent = agent as? GKAgent2D else { return }

        if agent == wormAgent {
            let agentPosition = CGPoint(x: CGFloat(agent.position.x), y: CGFloat(agent.position.y))

            //wormAgentShape.position = agentPosition //debug do agent
            wormSpriteNode.position = agentPosition
            wormSpriteNode.zRotation = CGFloat(agent.rotation)
            wormSpriteNode.xScale = -1
        }
    }

}

extension GameScene: SKPhysicsContactDelegate {
    func didBegin(_ contact: SKPhysicsContact) {
        //quando nodes colidirem...
    }
}
