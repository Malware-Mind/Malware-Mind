//
//  GameScene.swift
//  Malware Mind
//
//  Created by Alley Pereira on 15/03/21.
//

import Foundation
import SpriteKit
import GameplayKit

//swiftlint:disable identifier_name
enum Movements: String {
    case up = "upNode"
    case down = "downNode"
    case left = "leftNode"
    case right = "rightNode"
    case none
}

enum CollisionType: UInt32 {
    case player = 0b10
    case wall = 0b100
}

class GameScene: SKScene, SKPhysicsContactDelegate {

    // MARK: - Camera and SKScene related properties
    lazy var sceneCamera: SKCameraNode = {
        let camera = SKCameraNode()
        camera.setScale(2)
        return camera
    }()

    // MARK: - Entities
    let antivirus = Antivirus()
    let background = Background()
    let hud = Hud()
    let wormEntity = WormEntity()
    let virusEntity = VirusEntity()
    let collectEntity = CollectathonsEntity()

    let startPoint = CGPoint(x: 0, y: 1)
    let endPoint = CGPoint(x: 1, y: 0)

    // MARK: - Control Components
    var controlComponent: PlayerControlComponent? {
        antivirus.component(ofType: PlayerControlComponent.self)
    }

    private var previousUpdateTime: TimeInterval = TimeInterval()
    // MARK: - Gestures
    // MARK: - SKScene Life-Cycle

    override func didMove(to view: SKView) {
//        self.backgroundColor = .clear
        physicsWorld.contactDelegate = self
        self.setupBackgroundGradient()
        self.setupNodesPosition()
    }

    func setupBackgroundGradient() {
        let image: UIImage = UIImage.gradientImage(withBounds: self.frame, startPoint: startPoint, endPoint: endPoint, colors: [UIColor.gradientColor1.cgColor, UIColor.gradientColor2.cgColor])
        let gradientTexture = SKTexture(image: image)
        let gradientNode = SKSpriteNode(texture: gradientTexture)
        gradientNode.size = CGSize(width: UIScreen.main.bounds.width*2, height: UIScreen.main.bounds.height*2)
        self.addChild(gradientNode)
    }

    // MARK: - Adding Nodes to Scene
    func setupNodesPosition() {
        guard let antivirusSpriteNode = antivirus.component(ofType: AnimatedSpriteComponent.self)?.spriteNode else { return }
        
        guard let backgroundNode = background.tileMap else { return }
        
        let hudTimerNode = hud.timer
        let hudButtonNode = hud.pauseButton
        
        antivirusSpriteNode.size = CGSize(width: 45, height: 60)
        antivirusSpriteNode.name = "antivirus"
        
        antivirusSpriteNode.makePhysicsBody(bitMask: 1, collidingWith: 2, size: CGSize(width: antivirusSpriteNode.frame.width, height: antivirusSpriteNode.frame.height-20))
        
        antivirusSpriteNode.physicsBody?.restitution = 0
        
        backgroundNode.position = CGPoint(x: self.frame.midX, y: self.frame.midY+30)
        
        antivirusSpriteNode.position = CGPoint(x: backgroundNode.frame.midX, y: backgroundNode.frame.midY-20)
        
        addChild(hudTimerNode)
        addChild(hudButtonNode)
        self.addChild(backgroundNode)
        addDpadButtonNode()
        addAttackButtonNode()
        addWallNodes()
        self.addChild(antivirusSpriteNode)

        // MARK: - Add Virus, Worm, Collectathon
        //showTemporaryVirusWormCollectathon()
    }

    private func showTemporaryVirusWormCollectathon() {
        guard
            let virusSpriteComponent = virusEntity.component(ofType: AnimatedSpriteComponent.self)?.spriteNode,
            let wormSpriteComponent = wormEntity.component(ofType: AnimatedSpriteComponent.self)?.spriteNode,
            let collectathonComponent = collectEntity.component(ofType: AnimatedSpriteComponent.self)?.spriteNode
        else {
            return
        }

        wormSpriteComponent.position = CGPoint(x: self.frame.midX, y: self.frame.midY)
        virusSpriteComponent.position = CGPoint(x: self.frame.midX, y: self.frame.midY + 250)
        collectathonComponent.position = CGPoint(x: self.frame.midX, y: self.frame.midY - 250)

        self.addChild(virusSpriteComponent)
        self.addChild(wormSpriteComponent)
        self.addChild(collectathonComponent)
    }

    private func addDpadButtonNode() {
        
        guard let backgroundNode = background.tileMap else { return }
        
        let dPadButton = SKSpriteNode(imageNamed: "dpadButton")
        dPadButton.size = CGSize(width: UIScreen.main.bounds.width*0.30, height: UIScreen.main.bounds.width*0.29)
        dPadButton.position = CGPoint(x: UIScreen.main.bounds.midX*0.5, y: backgroundNode.frame.minY-(dPadButton.frame.height+20))
        addChild(dPadButton)

        let upNode = SKSpriteNode(imageNamed: "up")
        upNode.size = CGSize(width: UIScreen.main.bounds.width*0.04, height: UIScreen.main.bounds.width*0.038)
        upNode.position = CGPoint(x: dPadButton.frame.midX, y: dPadButton.frame.maxY-15)
        upNode.name = "upNode"
        addChild(upNode)

        let downNode = SKSpriteNode(imageNamed: "down")
        downNode.size = CGSize(width: UIScreen.main.bounds.width*0.04, height: UIScreen.main.bounds.width*0.038)
        downNode.position = CGPoint(x: dPadButton.frame.midX, y: dPadButton.frame.minY+15)
        downNode.name = "downNode"
        addChild(downNode)

        let leftNode = SKSpriteNode(imageNamed: "left")
        leftNode.size = CGSize(width: UIScreen.main.bounds.width*0.04, height: UIScreen.main.bounds.width*0.038)
        leftNode.position = CGPoint(x: dPadButton.frame.minX+15, y: dPadButton.frame.midY)
        leftNode.name = "leftNode"
        addChild(leftNode)

        let rightNode = SKSpriteNode(imageNamed: "right")
        rightNode.size = CGSize(width: UIScreen.main.bounds.width*0.04, height: UIScreen.main.bounds.width*0.038)
        rightNode.position = CGPoint(x: dPadButton.frame.maxX-15, y: dPadButton.frame.midY)
        rightNode.name = "rightNode"
        addChild(rightNode)
    }
    
    private func addAttackButtonNode() {
        
        guard let backgroundNode = background.tileMap else { return }
        
        let attackButton = SKSpriteNode(imageNamed: "attackButton")
        attackButton.size = CGSize(width: UIScreen.main.bounds.width*0.23, height: UIScreen.main.bounds.width*0.22)
        attackButton.position = CGPoint(x: UIScreen.main.bounds.midX*1.5, y: backgroundNode.frame.minY-(attackButton.frame.height+50))
        attackButton.name = "attackNode"
        addChild(attackButton)
        
    }
    
    private func addWallNodes() {
        
        guard let backgroundNode = background.tileMap else { return }
        
        let topWallNode = SKSpriteNode(imageNamed: "top_Wall")
        topWallNode.size = CGSize(width: backgroundNode.mapSize.width+60, height: 25)
        topWallNode.position = CGPoint(x: backgroundNode.frame.midX, y: backgroundNode.frame.maxY+10)
        topWallNode.name = "topWall"
        topWallNode.makePhysicsBody(bitMask: 2, collidingWith: 1, size: topWallNode.size)
        topWallNode.physicsBody?.isDynamic = false
        
        let leftWallNode = SKSpriteNode(imageNamed: "left_Wall")
        leftWallNode.size = CGSize(width: 31, height: backgroundNode.mapSize.height+20)
        leftWallNode.position = CGPoint(x: backgroundNode.frame.minX-14.5, y: backgroundNode.frame.midY-5)
        leftWallNode.name = "sideWall"
        leftWallNode.makePhysicsBody(bitMask: 2, collidingWith: 1, size: leftWallNode.size)
        leftWallNode.physicsBody?.isDynamic = false
        
        let bottomWallNode = SKSpriteNode(imageNamed: "bottom_Wall")
        bottomWallNode.size = CGSize(width: backgroundNode.frame.width+60, height: 25)
        bottomWallNode.position = CGPoint(x: backgroundNode.frame.midX, y: backgroundNode.frame.minY-10)
        bottomWallNode.name = "bottomWall"
        
        let rightWallNode = SKSpriteNode(imageNamed: "right_Wall")
        rightWallNode.size = CGSize(width: 31, height: backgroundNode.mapSize.height+20)
        rightWallNode.position = CGPoint(x: backgroundNode.frame.maxX+14.5, y: backgroundNode.frame.midY+5)
        rightWallNode.name = "rightWall"
        
        print(backgroundNode.mapSize.height)
        
        addChild(leftWallNode)
        addChild(rightWallNode)
        addChild(topWallNode)
        addChild(bottomWallNode)
        
    }

    func didBegin(_ contact: SKPhysicsContact) {
        print("to tocando")
        print(contact.contactPoint)
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {

        guard let touch = touches.first else { return }
        let location = touch.location(in: self)
        let tappedNodes = nodes(at: location)

        for node in tappedNodes {
            switch node.name {
            case Movements.up.rawValue:
                controlComponent?.handle(direction: .up)
            case Movements.down.rawValue:
                controlComponent?.handle(direction: .down)
            case Movements.left.rawValue:
                controlComponent?.handle(direction: .left)
            case Movements.right.rawValue:
                controlComponent?.handle(direction: .right)
            case "attackNode":
                print("attacking you")
                controlComponent?.attack()
            case "wall":
                print("hitting the wall")
            default:
                print("none")
            }
        }
    }
}
extension SKSpriteNode {

    func makePhysicsBody(bitMask: UInt32, collidingWith collision: UInt32, size: CGSize) {
        let physicsBody = SKPhysicsBody(rectangleOf: size)

        physicsBody.collisionBitMask = bitMask
        physicsBody.contactTestBitMask = collision
        physicsBody.categoryBitMask = collision

        physicsBody.affectedByGravity = false
        physicsBody.allowsRotation = false

        self.physicsBody = physicsBody
    }

}
