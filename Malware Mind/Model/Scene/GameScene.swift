//
//  GameScene.swift
//  Malware Mind
//
//  Created by Alley Pereira on 15/03/21.
//

import Foundation
import SpriteKit
import GameplayKit

//swiftlint:disable identifier_name
enum Movements: String {
    case up = "upNode"
    case down = "downNode"
    case left = "leftNode"
    case right = "rightNode"
    case none
}

enum CollisionType: UInt32 {
    case player = 0b10
    case wall = 0b100
}

class GameScene: SKScene, SKPhysicsContactDelegate {

    // MARK: - Camera and SKScene related properties
    lazy var sceneCamera: SKCameraNode = {
        let camera = SKCameraNode()
        camera.setScale(2)
        return camera
    }()

    // MARK: - Entities
    let antivirus = Antivirus()
    let background = Background()
    let hud = Hud()
    let wormEntity = WormEntity()
    let virusEntity = VirusEntity()
    let collectEntity = CollectathonsEntity()

    var currentViewController: UIViewController = (UIApplication.shared.keyWindow?.rootViewController)!
    var counter = 0
    var counterStartValue = 5
    var counterTimer = Timer()
    
    let startPoint = CGPoint(x: 0, y: 1)
    let endPoint = CGPoint(x: 1, y: 0)
    
    // MARK: - Control Components
    var controlComponent: PlayerControlComponent? {
        antivirus.component(ofType: PlayerControlComponent.self)
    }

    private var previousUpdateTime: TimeInterval = TimeInterval()
    // MARK: - Gestures
    // MARK: - SKScene Life-Cycle

    override func didMove(to view: SKView) {
//        self.backgroundColor = .clear
        physicsWorld.contactDelegate = self
        self.setupBackgroundGradient()
        self.setupNodesPosition()
        counter = counterStartValue
        startCounter()

    }

    func setupBackgroundGradient() {
        let image: UIImage = UIImage.gradientImage(withBounds: self.frame, startPoint: startPoint, endPoint: endPoint, colors: [UIColor.gradientColor1.cgColor, UIColor.gradientColor2.cgColor])
        let gradientTexture = SKTexture(image: image)
        let gradientNode = SKSpriteNode(texture: gradientTexture)
        gradientNode.size = CGSize(width: UIScreen.main.bounds.width*2, height: UIScreen.main.bounds.height*2)
        self.addChild(gradientNode)
    }

    // MARK: - Adding Nodes to Scene
    func setupNodesPosition() {
        
        setupBackgroundNode()
        setupAntivirusNode()
        setupHudNode()
        addDpadButtonNode()
        addAttackButtonNode()
        addWallNodes()
        
        // MARK: - Add Virus, Worm, Collectathon
        //showTemporaryVirusWormCollectathon()
    }
    
    private func setupBackgroundNode() {
        
        guard let backgroundNode = background.tileMap else { return }
        
        backgroundNode.position = CGPoint(x: self.frame.midX, y: self.frame.midY+30)
        self.addChild(backgroundNode)
    }
    
    private func setupAntivirusNode() {
        
        guard let backgroundNode = background.tileMap else { return }
        guard let antivirusSpriteNode = antivirus.component(ofType: AnimatedSpriteComponent.self)?.spriteNode else { return }
        
        antivirusSpriteNode.size = CGSize(width: 45, height: 60)
        antivirusSpriteNode.name = "antivirus"
        antivirusSpriteNode.makePhysicsBody(bitMask: 1, collidingWith: 2, size: CGSize(width: antivirusSpriteNode.frame.width, height: antivirusSpriteNode.frame.height-20))
        antivirusSpriteNode.physicsBody?.restitution = 0
        antivirusSpriteNode.position = CGPoint(x: backgroundNode.frame.midX, y: backgroundNode.frame.midY-20)
        
        self.addChild(antivirusSpriteNode)
        
    }
    
    private func setupHudNode() {
        let hudTimerNode = hud.timer
        hudTimerNode.text = "\(counterStartValue)"
        let hudButtonNode = hud.pauseButton

        hudButtonNode.name = "pause"
        hudButtonNode.makePhysicsBody(bitMask: 1, collidingWith: 2, size: hudButtonNode.size)
        
        addChild(hudTimerNode)
        addChild(hudButtonNode)
    }

    private func showTemporaryVirusWormCollectathon() {
        guard
            let virusSpriteComponent = virusEntity.component(ofType: AnimatedSpriteComponent.self)?.spriteNode,
            let wormSpriteComponent = wormEntity.component(ofType: AnimatedSpriteComponent.self)?.spriteNode,
            let collectathonComponent = collectEntity.component(ofType: AnimatedSpriteComponent.self)?.spriteNode
        else {
            return
        }

        wormSpriteComponent.position = CGPoint(x: self.frame.midX, y: self.frame.midY)
        virusSpriteComponent.position = CGPoint(x: self.frame.midX, y: self.frame.midY + 250)
        collectathonComponent.position = CGPoint(x: self.frame.midX, y: self.frame.midY - 250)

        self.addChild(virusSpriteComponent)
        self.addChild(wormSpriteComponent)
        self.addChild(collectathonComponent)
    }

    private func addDpadButtonNode() {
        
        guard let backgroundNode = background.tileMap else { return }
        
        let dPadButton = SKSpriteNode(imageNamed: "dpadButton")
        dPadButton.size = CGSize(width: UIScreen.main.bounds.width*0.30, height: UIScreen.main.bounds.width*0.29)
        dPadButton.position = CGPoint(x: UIScreen.main.bounds.midX*0.5, y: backgroundNode.frame.minY-(dPadButton.frame.height+20))
        addChild(dPadButton)

        let upNode = setupDpadButtonsNode(named: "upNode", imageNamed: "up", position: CGPoint(x: dPadButton.frame.midX, y: dPadButton.frame.maxY-15))
        let downNode = setupDpadButtonsNode(named: "downNode", imageNamed: "down", position: CGPoint(x: dPadButton.frame.midX, y: dPadButton.frame.minY+15))
        let leftNode = setupDpadButtonsNode(named: "leftNode", imageNamed: "left", position: CGPoint(x: dPadButton.frame.minX+15, y: dPadButton.frame.midY))
        let rightNode = setupDpadButtonsNode(named: "rightNode", imageNamed: "right", position: CGPoint(x: dPadButton.frame.maxX-15, y: dPadButton.frame.midY))
        
        addChild(upNode)
        addChild(downNode)
        addChild(rightNode)
        addChild(leftNode)
    }
    
    private func setupDpadButtonsNode(named: String, imageNamed: String, position: CGPoint) -> SKSpriteNode {
        
        let node = SKSpriteNode(imageNamed: imageNamed)
        
        node.name = named
        node.size = CGSize(width: UIScreen.main.bounds.width*0.04, height: UIScreen.main.bounds.width*0.038)
        node.position = position
        
        return node
    }
    
    private func addAttackButtonNode() {
        
        guard let backgroundNode = background.tileMap else { return }
        
        let attackButton = SKSpriteNode(imageNamed: "attackButton")
        attackButton.size = CGSize(width: UIScreen.main.bounds.width*0.23, height: UIScreen.main.bounds.width*0.22)
        attackButton.position = CGPoint(x: UIScreen.main.bounds.midX*1.5, y: backgroundNode.frame.minY-(attackButton.frame.height+50))
        attackButton.name = "attackNode"
        addChild(attackButton)
        
    }
    
    private func addWallNodes() {
        
        guard let backgroundNode = background.tileMap else { return }
        
        let topWallNode = setupWall(named: "topWall", imageNamed: "top_Wall", size:  CGSize(width: backgroundNode.mapSize.width+60, height: 25), position: CGPoint(x: backgroundNode.frame.midX, y: backgroundNode.frame.maxY+10))
        
        let bottomWallNode = setupWall(named: "bottomWall", imageNamed: "bottom_Wall", size:  CGSize(width: backgroundNode.mapSize.width+60, height: 25), position: CGPoint(x: backgroundNode.frame.midX, y: backgroundNode.frame.minY-10))
        
        let leftWallNode = setupWall(named: "leftWall", imageNamed: "left_Wall", size:  CGSize(width: 31, height: backgroundNode.mapSize.height+20), position: CGPoint(x: backgroundNode.frame.minX-14.5, y: backgroundNode.frame.midY-5))
        
        let rightWallNode = setupWall(named: "rightWall", imageNamed: "right_Wall", size:  CGSize(width: 31, height: backgroundNode.mapSize.height+20), position: CGPoint(x: backgroundNode.frame.maxX+14.5, y: backgroundNode.frame.midY+5))
        
        addChild(leftWallNode)
        addChild(rightWallNode)
        addChild(topWallNode)
        addChild(bottomWallNode)
        
    }
    
    private func setupWall(named: String, imageNamed: String, size: CGSize, position: CGPoint) -> SKSpriteNode {
        
        let node = SKSpriteNode(imageNamed: imageNamed)
        
        node.name = named
        node.size = size
        node.position = position
        node.makePhysicsBody(bitMask: 2, collidingWith: 1, size: size)
        node.physicsBody?.isDynamic = false
        
        return node
    }

    func didBegin(_ contact: SKPhysicsContact) {
        print("to tocando")
        print(contact.contactPoint)
    }

    func startCounter() {
        counterTimer = Timer.scheduledTimer(timeInterval: 1.0, target: self, selector: #selector(decrementCounter), userInfo: nil, repeats: true)
    }

    @objc func decrementCounter() {
        if counter > 0 {
            counter -= 1
            hud.timer.text = "\(counter)"
        } else {
//            NotificationCenter.default.post(name: NSNotification.Name(rawValue: "gameOverID"), object: nil)
        }
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {

        guard let touch = touches.first else { return }
        let location = touch.location(in: self)
        let tappedNodes = nodes(at: location)

        for node in tappedNodes {
            switch node.name {
            case Movements.up.rawValue:
                controlComponent?.handle(direction: .up)
            case Movements.down.rawValue:
                controlComponent?.handle(direction: .down)
            case Movements.left.rawValue:
                controlComponent?.handle(direction: .left)
            case Movements.right.rawValue:
                controlComponent?.handle(direction: .right)
            case "attackNode":
                print("attacking you")
                controlComponent?.attack()
            case "wall":
                print("hitting the wall")
            case "pause":
                NotificationCenter.default.post(name: NSNotification.Name(rawValue: "pauseGameID"), object: nil)
//                let pauseVC = PauseAlertViewController()
//                pauseVC.modalPresentationStyle = .fullScreen
//                self.currentViewController.present(pauseVC, animated: true, completion: nil)
            default:
                print("none")
            }
        }
    }
}

extension SKSpriteNode {

    func makePhysicsBody(bitMask: UInt32, collidingWith collision: UInt32, size: CGSize) {
        let physicsBody = SKPhysicsBody(rectangleOf: size)

        physicsBody.collisionBitMask = bitMask
        physicsBody.contactTestBitMask = collision
        physicsBody.categoryBitMask = collision

        physicsBody.affectedByGravity = false
        physicsBody.allowsRotation = false

        self.physicsBody = physicsBody
    }

}
