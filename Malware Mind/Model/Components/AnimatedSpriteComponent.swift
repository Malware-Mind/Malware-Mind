//  AnimatedSpriteComponent.swift
//  Malware Mind
//
//  Created by JÃ©ssica Araujo on 15/03/21.
//

import GameplayKit
import SpriteKit

class AnimatedSpriteComponent: GKComponent {

    var spriteNode: SpriteNode!

    var animationAtlas: SKTextureAtlas?
    var animationTextures: [SKTexture] {
        animationAtlas?.textureNames.compactMap { textureName in
            animationAtlas?.textureNamed(textureName)} ?? []
    }

    init(textureName: String) {
        super.init()
        self.spriteNode = SpriteNode(imageNamed: textureName)
    }

    init(atlasName: String) {
        super.init()

        self.animationAtlas = SKTextureAtlas(named: atlasName)
        self.spriteNode = SpriteNode(imageNamed: animationAtlas!.textureNames.first!)
        self.spriteNode.texture = animationTextures.first!
    }

    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }

    func setAnimation(atlasName: String) {
        spriteNode.removeAllActions()
        self.animationAtlas = SKTextureAtlas(named: atlasName)
        self.spriteNode.texture = animationTextures.first!

        spriteNode.run(
            SKAction.repeatForever(
                SKAction.animate(with: animationTextures,
                                 timePerFrame: 0.20,
                                 resize: false,
                                 restore: true
                )
            ),
            withKey: atlasName
        )

    }

    func setTexture(direction: Movements) {
        switch direction {
        case .up:
            self.spriteNode.texture = SKTexture(imageNamed: "Antivirus_Costa")
        case .down:
            self.spriteNode.texture = SKTexture(imageNamed: "Antivirus_Frente")
        case .none:
            self.spriteNode.texture = SKTexture(imageNamed: "Antivirus_Frente")
        case .left:
            self.spriteNode.texture = SKTexture(imageNamed: "Antivirus_Lateral")
        case .right:
            self.spriteNode.texture = SKTexture(imageNamed: "Antivirus_Lateral_Direita")
        }
    }
    
    var nextGridPosition: SIMD2<Int32> = .zero {
        didSet {
            if oldValue.x != nextGridPosition.x || oldValue.y != nextGridPosition.y {
                var nextGridActionSequence: [SKAction] = []

                if let scene = spriteNode?.scene as? GameScene {
                    let point = scene.point(forGridPosition: nextGridPosition)
                    let action = SKAction.move(to: point, duration: 0.35)
                    nextGridActionSequence.append(action)
                }

                let update = SKAction.run({ [weak self] in
                    (self?.entity as? BaseGridEntity)?.gridPosition = self?.nextGridPosition
                })
                nextGridActionSequence.append(update)

                spriteNode?.run(SKAction.sequence(nextGridActionSequence), withKey: "move")
            }
        }
    }

}
