//
//  VirusWalkState.swift
//  Malware Mind
//
//  Created by Pedro Henrique on 06/04/21.
//

import UIKit
import SpriteKit
import GameplayKit

class VirusWalkState: VirusBaseState {
    
    var closestGoal: SIMD2<Int32>?

    override init(game: GameScene, entity: BaseGridEntity, goal: [BaseGridEntity]) {
        super.init(game: game, entity: entity, goal: goal)
    }
    
    func pathToGoal(goal: SIMD2<Int32>?) -> [GKGridGraphNode] {
        if let graph = self.game.level.pathfindingGraph,
           let goalGridPosition = goal,
           let goalNode = graph.node(atGridPosition: goalGridPosition) {
            return self.path(to: goalNode) ?? []
        }
        return []
    }

    var animationComponent: AnimatedSpriteComponent? {
        self.entity.component(ofType: AnimatedSpriteComponent.self)
    }

    override func didEnter(from previousState: GKState?) {
        super.didEnter(from: previousState)

        animationComponent?.setAnimation(atlasName: "VirusIdle")
    }
    
    override func update(deltaTime seconds: TimeInterval) {
        super.update(deltaTime: seconds)
        
        closestGoal = findClosestGoal()
        
        self.start(followingPath: self.pathToGoal(goal: closestGoal))
    }
    
    func findClosestGoal() -> SIMD2<Int32>? {
        var closestGoalDistance = 9999
        var closestGoal: SIMD2<Int32>?
        
        for index in 0..<enemyGoal.count {
            let candidateGoal = pathToGoal(goal: enemyGoal[index].gridPosition).count
            if candidateGoal < closestGoalDistance {
                closestGoalDistance = pathToGoal(goal: enemyGoal[index].gridPosition).count
                closestGoal = enemyGoal[index].gridPosition
            }
        }
        
        return closestGoal
    }
    
    func updateGoals(new: [BaseGridEntity]) {
        enemyGoal = new
    }
    
}
